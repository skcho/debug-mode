(** Interactive CLI debug mode. *)

(** The type of a query.

    The query is simply regarded as a {e lazy} tree constructed by the
    two types of query.

    - {b Leaf query} contains a string message to print.

    - {b Node query} contains a set of query candidates(= children) to
      traverse next time.

    {e Laziness}: since each candidate has a function to generate the
    next query to run, rather than an actual query, the query tree is
    constructed on demand during the debug mode.
*)
type t

(** Start the debug mode. *)
val run : t -> unit

(** {2 Leaf query} *)

(** Return a leaf query with a short message. *)
val short : string -> t

(** [long f] returns a leaf query to print a long message.  When
    running the query, [f ()] is called to print a long message, or to
    make a side effect, e.g., writing a file. *)
val long : (unit -> unit) -> t

(** {2 Node query} *)

(** The type of a set of child queries. *)
type children_t

(** Return an empty set of child queries. *)
val empty : children_t

(** [add name gen children] adds a child query to the [children]
    set.

    - [name] is the name of the added child.  The first substring
      parenthesized by [\[] and [\]] of [name] is used as a command in
      the debug mode.  If there is no such a substring, an arbitrary
      number is assigned as a command.

    - [gen] is a function to generate an actual query to run.  The
      arguments given with the command are passed to [gen].

    For example, if a child query is add by [add "\[v\]iew" gen
    children], the following command in the debug mode,

    {[$ v arg1 arg2]}

    runs the query generated by [gen \["arg1"; "arg2"\]].
*)
val add : string -> (string list -> t) -> children_t -> children_t

(** Return a node query. *)
val node : children_t -> t
